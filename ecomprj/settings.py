"""
Django settings for ecomprj project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

import dj_database_url
# import cloudinary_storage

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-#)howz2v7ir=vqreo$g+ppq$kt=xwt+n7_5w1vha9hxy9^1!4d"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
  "*",
  'ecom-store-production.up.railway.app',
  ]
CSRF_TRUSTED_ORIGINS = [
    'https://*.railway.app'
]

# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.humanize',

    #thirdparty
    "taggit",
    "ckeditor",
    "paypal.standard.ipn",
    "whitenoise.runserver_nostatic",
    'cloudinary',
    'cloudinary_storage',

    #Custom applications
    'core',
    'userauths',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ecomprj.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR,'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "core.context_processor.default",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ecomprj.wsgi.application"


# Database
from dotenv import load_dotenv
load_dotenv()
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

PRODUCTION = False

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
if PRODUCTION:
    DATABASES['default'] = dj_database_url.parse(os.getenv('DATABASE_URL'))
    
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATIC_URL = "/static/"
if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATIC_ROOT=os.path.join(BASE_DIR,'staticfiles') #stores all static files 

STATICFILES_DIRS=[os.path.join(BASE_DIR,'static')] #collects all static files static folder-Holds all static files


MEDIA_URL='/media/' #url that media files goes thru b4 we can locate them

MEDIA_ROOT=os.path.join(BASE_DIR,"media")    #All images sit

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


JAZZMIN_SETTINGS={
    #'site_header':"",
    #'site_brand':"",
    #'site_logo':"",add site logo urlpath
    'copyright':"Proudly By Davis",
}
LOGIN_URL="userauths:login"
AUTH_USER_MODEL='userauths.User'

CKEDITOR_UPLOAD_PATH='uploads/'

CKEDITOR_CONFIGS={
    'default':{
        'skin':'moono',
        'codeSnippet_theme':'monokai',
        'toolbar':'all',
        'extraPlugins':','.join(
            [
             'codesnippet',
             'widget',
             'dialog'
             ]
        ),
    }
}

PAYPAL_RECEIVER_EMAIL='itsdavismuchiri21@gmail.com'
PAYPAL_TEST=True#set false to go live

# #cloudinary configs
# CLOUDINARY_STORAGE = {
#     'CLOUD_NAME': os.getenv('CLOUD_NAME'),
#     'API_KEY': os.getenv('API_KEY'),
#     'API_SECRET': os.getenv('API_SECRET')
# }

# DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'